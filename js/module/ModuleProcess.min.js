STORAGE="Storage",WIFI="Wifi",MAIN_CONFIG="init.conf",DEVICE_CONFIG="device.conf",NETWORK_CONFIG="network.conf",MQTT_CONFIG="MQTTClientConfig.json",BUS_NODE="bus",RTC_NODE="RTC",LED_NODE="SysLED",BUZZ_NODE="SysBuzzer",MODULES_NODE="modules",DEFAULT_FILE=".bootcde",LOGGER_NAME="Logger",ERROR_NAME="ClassAppError",MATH_NAME="ClassAppMath",I2C_NAME="I2Cbus",SPI_NAME="SPIbus",UART_NAME="UARTbus",ACTUATOR_NAME="ClassActuator",SENSOR_NAME="ClassSensor",ARCHITECT_NAME="SensorManager",WIFI_NAME="Network",WS_NAME="WSServer",MSG_BOOTUP_SUCCESS="Boot up sequence complete!",MSG_RTC_SUCCESS="System time is set via RTC clock module",MSG_RTC_ADJUSTED="Date of RTC clock module adjusted",MSG_RTC_NOT_FOUND="RTC clock not found!",MSG_RTC_NOT_SPECIFIED="RTC clock is not specified in device.conf!",MSG_LED_NOT_SPECIFIED="System LED is not specified in device.conf!",MSG_BUZZ_NOT_SPECIFIED="System Buzzer is not specified in device.conf!",MSG_LED_FOUND="Found system LED at pin ",MSG_BUZZ_FOUND="Found system buzzer at pin ",MSG_TIME_SET_FAIL="Failed to properly set system time!",MSG_TIME_SET_SUCCESS="System time set to",MSG_MODULE_LOADED="loaded.",MSG_MODULE_NOT_FOUND="not found!",MSG_MODULE_UNDEFINED="Undefined in config file!",MSG_WIFI_STARTUP="Starting up Network. . .",MSG_MDNS_STATUS="MDNS: ",MSG_MDNS_LOCAL=".local",MSG_WIFI_ERROR="Failed to start up WiFi! :: ",MSG_WSS_CONNECTED="WebSocket Server listens to port ",MSG_WSS_ERROR="WebSocket Server failed to run",MSG_WSS_SKIPPED="No connection to network. WebSocket server start skipped.",MSG_BOARD_ID="Board ID:",MSG_LOAD_FILE="LoadFile set to:",MSG_SUB="Subscribed to system events.",MSG_EMPTY="",MSG_FATAL_CANT_FIND="Process | CRITICAL | Cannot find",MSG_FATAL_MODULES="modules to load",TS_JAN_FIRST_2000=94392e4,TS_JAN_FIRST_2100=409968e4;class ClassProcess{constructor(){if(!process.env.MODULES.includes(STORAGE))throw`${MSG_FATAL_CANT_FIND} ${STORAGE}`;if(this._FileReader=require(STORAGE),!this._FileReader.list().includes(MAIN_CONFIG))throw`${MSG_FATAL_CANT_FIND} ${MAIN_CONFIG}`;if(!this._FileReader.list().includes(DEVICE_CONFIG))throw`${MSG_FATAL_CANT_FIND} ${DEVICE_CONFIG}`;if(this._LoadFile=this.GetAppName(),!this.IsProgramInConfig(this._LoadFile))throw`${MSG_FATAL_CANT_FIND} ${this._LoadFile}`;this._RTC=void 0,this._Wifi=void 0,this._HaveWiFi=!1,this._Name="Process"}Run(){let appName=this._FileReader.readJSON(MAIN_CONFIG,!0).app;if(void 0!==appName&&appName!=this._LoadFile)load(appName);else{let mods=this._FileReader.readJSON(MAIN_CONFIG,!0)[MODULES_NODE],Logger;if(!mods)throw`${MSG_FATAL_CANT_FIND} ${MSG_FATAL_MODULES}`;this._BoardID=`${process.env.BOARD} ${process.env.SERIAL} ${this._FileReader.readJSON(MAIN_CONFIG,!0).name||MSG_EMPTY}`,this._BoardName=`${this._FileReader.readJSON(MAIN_CONFIG,!0).name||MSG_EMPTY}`,this._LogCreds=this._FileReader.readJSON(MAIN_CONFIG,!0).logger,this._BoardSerial=`${process.env.SERIAL}`,this._TimeZone=this._FileReader.readJSON(MAIN_CONFIG,!0).timezone||0;try{Logger=new(require(mods[LOGGER_NAME])),Object.defineProperty(global,LOGGER_NAME,{get:()=>Logger}),Logger.Log(this._Name,Logger.LogLevel.INFO,this.GetSuccessString(LOGGER_NAME))}catch(e){return void console.log(`[${this.GetSystemTime()}] Process | CRITICAL | ${this.GetFailString(LOGGER_NAME,mods[LOGGER_NAME])}`)}Logger.Log(this._Name,Logger.LogLevel.INFO,`${MSG_BOARD_ID} ${this._BoardID}`),Logger.Log(this._Name,Logger.LogLevel.INFO,`${MSG_LOAD_FILE} ${this._LoadFile}`);try{const ClassAppError=require(mods[ERROR_NAME]);Object.defineProperty(global,ERROR_NAME,{get:()=>ClassAppError}),Logger.Log(this._Name,Logger.LogLevel.INFO,this.GetSuccessString(ERROR_NAME))}catch(e){Logger.Log(this._Name,Logger.LogLevel.ERROR,this.GetFailString(ERROR_NAME,mods[ERROR_NAME]))}try{const AppMath=require(mods[MATH_NAME]);Object.defineProperty(global,MATH_NAME,{get:()=>AppMath}),AppMath.is(),Logger.Log(this._Name,Logger.LogLevel.INFO,this.GetSuccessString(MATH_NAME))}catch(e){Logger.Log(this._Name,Logger.LogLevel.ERROR,this.GetFailString(MATH_NAME,mods[MATH_NAME]))}try{const I2Cbus=new(require(mods[I2C_NAME]));Object.defineProperty(global,I2C_NAME,{get:()=>I2Cbus}),Logger.Log(this._Name,Logger.LogLevel.INFO,this.GetSuccessString(I2C_NAME))}catch(e){Logger.Log(this._Name,Logger.LogLevel.ERROR,this.GetFailString(I2C_NAME,mods[I2C_NAME]))}try{const SPIbus=new(require(mods[SPI_NAME]));Object.defineProperty(global,SPI_NAME,{get:()=>SPIbus}),Logger.Log(this._Name,Logger.LogLevel.INFO,this.GetSuccessString(SPI_NAME))}catch(e){Logger.Log(this._Name,Logger.LogLevel.ERROR,this.GetFailString(SPI_NAME,mods[SPI_NAME]))}try{const UARTbus=new(require(mods[UART_NAME]));Object.defineProperty(global,UART_NAME,{get:()=>UARTbus}),Logger.Log(this._Name,Logger.LogLevel.INFO,this.GetSuccessString(UART_NAME))}catch(e){Logger.Log(this._Name,Logger.LogLevel.ERROR,this.GetFailString(UART_NAME,mods[UART_NAME]))}try{const ClassActuator=require(mods[ACTUATOR_NAME]);Object.defineProperty(global,ACTUATOR_NAME,{get:()=>ClassActuator}),Logger.Log(this._Name,Logger.LogLevel.INFO,this.GetSuccessString(ACTUATOR_NAME))}catch(e){Logger.Log(this._Name,Logger.LogLevel.ERROR,this.GetFailString(ACTUATOR_NAME,mods[ACTUATOR_NAME]))}try{const ClassSensor=require(mods[SENSOR_NAME]);Object.defineProperty(global,SENSOR_NAME,{get:()=>ClassSensor}),Logger.Log(this._Name,Logger.LogLevel.INFO,this.GetSuccessString(SENSOR_NAME))}catch(e){Logger.Log(this._Name,Logger.LogLevel.ERROR,this.GetFailString(SENSOR_NAME,mods[SENSOR_NAME]))}try{const SensorManager=new(require(mods[ARCHITECT_NAME]));Object.defineProperty(global,ARCHITECT_NAME,{get:()=>SensorManager}),Logger.Log(this._Name,Logger.LogLevel.INFO,this.GetSuccessString(ARCHITECT_NAME))}catch(e){console.log(e),Logger.Log(this._Name,Logger.LogLevel.ERROR,this.GetFailString(ARCHITECT_NAME,mods[ARCHITECT_NAME]))}this.InitSysEvents();try{const WSServer=new(require(mods[WS_NAME]));Object.defineProperty(global,WS_NAME,{get:()=>WSServer}),Logger.Log(this._Name,Logger.LogLevel.INFO,this.GetSuccessString(WS_NAME))}catch(e){console.log(e),Logger.Log(this._Name,Logger.LogLevel.ERROR,this.GetFailString(WS_NAME,mods[WS_NAME]))}if(this._FileReader.list().includes(NETWORK_CONFIG)){Logger.Log(this._Name,Logger.LogLevel.INFO,MSG_WIFI_STARTUP);let netconf=this._FileReader.readJSON(NETWORK_CONFIG,!0);try{if(process.env.MODULES.includes(WIFI))this._Wifi=new(require(mods[WIFI_NAME])),this._Wifi.Init(netconf,void 0,res=>{if(this._HaveWiFi=res,this._HaveWiFi){let WSRes=WSServer.Run();-1==WSRes?Logger.Log(this._Name,Logger.LogLevel.WARN,MSG_WSS_ERROR):Logger.Log(this._Name,Logger.LogLevel.INFO,MSG_WSS_CONNECTED+WSRes)}this.SetSystemTime(),this.CheckSystemTime(),Logger.Log(this._Name,Logger.LogLevel.INFO,MSG_BOOTUP_SUCCESS),Object.emit("complete")});else{let wfbus=netconf.wifibus,bus=UARTbus._UARTbus[wfbus.index].IDbus;bus.setup(wfbus.baudrate),P4.mode("output"),this._Wifi=new(require(mods[WIFI_NAME])),this._Wifi.Init(netconf,bus,res=>{if(this._HaveWiFi=res,this._HaveWiFi){let WSRes=WSServer.Run();-1==WSRes?Logger.Log(this._Name,Logger.LogLevel.WARN,MSG_WSS_ERROR):Logger.Log(this._Name,Logger.LogLevel.INFO,MSG_WSS_CONNECTED+WSRes)}else Logger.Log(this._Name,Logger.LogLevel.WARN,MSG_WSS_SKIPPED);this.SetSystemTime(),this.CheckSystemTime(),Logger.Log(this._Name,Logger.LogLevel.INFO,MSG_BOOTUP_SUCCESS),Object.emit("complete")})}}catch(e){Logger.Log(this._Name,Logger.LogLevel.ERROR,MSG_WIFI_ERROR+e),this.SetSystemTime(),this.CheckSystemTime(),Logger.Log(this._Name,Logger.LogLevel.INFO,MSG_BOOTUP_SUCCESS),Object.emit("complete")}}else Logger.Log(this._Name,Logger.LogLevel.ERROR,this.GetFailString(WIFI_NAME,NETWORK_CONFIG)),this.SetSystemTime(),this.CheckSystemTime(),Logger.Log(this._Name,Logger.LogLevel.INFO,MSG_BOOTUP_SUCCESS)}}InitSysEvents(){let node_id=this.GetModuleIdByName(LED_NODE),led,bz,on=!1,interval;void 0===node_id?Logger.Log(this._Name,Logger.LogLevel.WARN,MSG_LED_NOT_SPECIFIED):(led=SensorManager.CreateDevice(node_id)[0],Logger.Log(this._Name,Logger.LogLevel.INFO,MSG_LED_FOUND+led._ThisActuator._Pins[0]),led.Off()),node_id=this.GetModuleIdByName(BUZZ_NODE),void 0===node_id?Logger.Log(this._Name,Logger.LogLevel.WARN,MSG_BUZZ_NOT_SPECIFIED):(bz=SensorManager.CreateDevice(node_id)[0],Logger.Log(this._Name,Logger.LogLevel.INFO,MSG_BUZZ_FOUND+bz._ThisActuator._Pins[0])),Object.on("complete",()=>{bz&&bz.On(.1),led&&led.On(.5),Process._HaveWiFi&&(LED1.write(!0),setTimeout(()=>{bz&&bz.On(.18)},100)),setTimeout(()=>{bz&&bz.Off()},200),setTimeout(()=>{led&&led.On(.01)},1e3)}),Object.on("connect",()=>{bz&&bz.On(.5),setTimeout(()=>{bz&&bz.On(.9),setTimeout(()=>{bz&&bz.On(1),setTimeout(()=>{bz&&bz.Off()},100)},100)},500),interval=setInterval(()=>{on=!on,led&&led.On(.01+.07*on)},500)}),Object.on("disconnect",()=>{bz&&bz.On(1),setTimeout(()=>{bz&&bz.On(.6),setTimeout(()=>{bz&&bz.On(.5),setTimeout(()=>{bz&&bz.Off()},100)},100)},500),clearInterval(interval),led&&led.On(.01)}),Object.on("proc-get-systemdata",()=>{let packet={com:"proc-return-systemdata",args:[this._BoardName,this._BoardSerial]};Object.emit("proc-return",packet)}),Logger.Log(this._Name,Logger.LogLevel.INFO,MSG_SUB)}GetAppName(){try{return __FILE__}catch(e){return DEFAULT_FILE}}GetBoardName(){return this._BoardID}GetDeviceConfig(id){return((this._FileReader.readJSON(DEVICE_CONFIG,!0)||{})[this._LoadFile]||{})[id]}GetBusesConfig(){return this._FileReader.readJSON(DEVICE_CONFIG,!0)[this._LoadFile][BUS_NODE]}GetMQTTClientConfig(){return this._FileReader.readJSON(MQTT_CONFIG,!0)[this._LoadFile]}SetSystemTime(){try{let node_name=this.GetModuleIdByName(RTC_NODE);if(void 0===node_name)Logger.Log(this._Name,Logger.LogLevel.ERROR,MSG_RTC_NOT_SPECIFIED);else{this._RTC=SensorManager.CreateDevice(node_name);let ts=this._RTC[0]._ThisSensor.GetTimeUnix();if(ts<=TS_JAN_FIRST_2000||ts>=TS_JAN_FIRST_2100)Logger.Log(this._Name,Logger.LogLevel.WARN,MSG_RTC_NOT_FOUND);else{let sys_t=Math.floor((new Date).getTime()/1e3);sys_t<=TS_JAN_FIRST_2000||sys_t>=TS_JAN_FIRST_2100?(setTime(ts),this._RTC[0].Start(1e3),E.setTimeZone(this._TimeZone),Logger.Log(this._Name,Logger.LogLevel.INFO,MSG_RTC_SUCCESS)):(this._RTC[0]._ThisSensor.SetTime(new Date),this._RTC[0].Start(1e3),E.setTimeZone(this._TimeZone),Logger.Log(this._Name,Logger.LogLevel.INFO,MSG_RTC_ADJUSTED))}}}catch(e){Logger.Log(this._Name,Logger.LogLevel.WARN,MSG_RTC_NOT_FOUND)}}CheckSystemTime(){let final_t_check=Math.floor((new Date).getTime()/1e3);final_t_check<=TS_JAN_FIRST_2000||final_t_check>=TS_JAN_FIRST_2100?Logger.Log(this._Name,Logger.LogLevel.WARN,MSG_TIME_SET_FAIL):Logger.Log(this._Name,Logger.LogLevel.INFO,`${MSG_TIME_SET_SUCCESS} ${this.GetSystemTime()}`)}GetModuleIdByName(_name){let conf=this._FileReader.readJSON(DEVICE_CONFIG,!0)[this._LoadFile],arr=Object.keys(conf),res;for(let i=0;i<arr.length;i++)if(conf[arr[i]].name==_name){res=arr[i];break}return res}GetSystemTime(){let date=new Date;return date.getFullYear()+"-"+("0"+(date.getMonth()+1)).substr(-2)+"-"+("0"+date.getDate()).substr(-2)+" "+("0"+date.getHours()).substr(-2)+":"+("0"+date.getMinutes()).substr(-2)+":"+("0"+date.getSeconds()).substr(-2)}IsProgramInConfig(filename){return Boolean(this._FileReader.readJSON(DEVICE_CONFIG,!0)[filename])}GetSuccessString(moduleName){return`${moduleName} ${MSG_MODULE_LOADED}`}GetFailString(moduleName,fileName){return void 0===fileName?`${moduleName}: ${MSG_MODULE_UNDEFINED}`:`${moduleName}: ${fileName} ${MSG_MODULE_NOT_FOUND}`}}exports=ClassProcess;