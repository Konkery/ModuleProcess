STORAGE="Storage",WIFI="Wifi",MAIN_CONFIG="init.conf",DEVICE_CONFIG="device.conf",NETWORK_CONFIG="network.conf",MQTT_CONFIG="MQTTClientConfig.json",BUS_NODE="bus",RTC_NODE="RTC",MODULES_NODE="modules",DEFAULT_FILE=".bootcde",LOGGER_NAME="Logger",ERROR_NAME="ClassAppError",MATH_NAME="ClassAppMath",I2C_NAME="I2Cbus",SPI_NAME="SPIbus",UART_NAME="UARTbus",ACTUATOR_NAME="ClassActuator",SENSOR_NAME="ClassSensor",ARCHITECT_NAME="SensorManager",WIFI_NAME="Network",MSG_BOOTUP_SUCCESS="Boot up sequence complete!",MSG_RTC_SUCCESS="System time is set via RTC clock module",MSG_RTC_ADJUSTED="Date of RTC clock module adjusted",MSG_RTC_NOT_FOUND="RTC clock not found!",MSG_TIME_SET_FAIL="Failed to properly set system time!",MSG_TIME_SET_SUCCESS="System time set to",MSG_MODULE_LOADED="loaded.",MSG_MODULE_NOT_FOUND="not found!",MSG_WIFI_STARTUP="Starting up Network. . .",MSG_WIFI_CONNECTED="Connected! IP: ",MSG_WIFI_ERROR="Failed to start up WiFi! :: ",MSG_BOARD_ID="Board ID:",MSG_LOAD_FILE="LoadFile set to:",MSG_EMPTY="",MSG_FATAL_CANT_FIND="FATAL ERROR>> Cannot find",MSG_FATAL_MODULES="modules to load",TS_JAN_FIRST_2000=94392e4,TS_JAN_FIRST_2100=409968e4;class ClassProcess{constructor(){if(!process.env.MODULES.includes(STORAGE))throw`${MSG_FATAL_CANT_FIND} ${STORAGE}`;if(this._FileReader=require(STORAGE),!this._FileReader.list().includes(MAIN_CONFIG))throw`${MSG_FATAL_CANT_FIND} ${MAIN_CONFIG}`;if(!this._FileReader.list().includes(DEVICE_CONFIG))throw`${MSG_FATAL_CANT_FIND} ${DEVICE_CONFIG}`;if(this._LoadFile=this.GetAppName(),!this.IsProgramInConfig(this._LoadFile))throw`${MSG_FATAL_CANT_FIND} ${this._LoadFile}`;this._RTC=void 0,this._Wifi=void 0,this._HaveWiFi=!1}Run(){let mods=this._FileReader.readJSON(MAIN_CONFIG,!0)[MODULES_NODE],Logger;if(!mods)throw`${MSG_FATAL_CANT_FIND} ${MSG_FATAL_MODULES}`;try{Logger=new(require(mods[LOGGER_NAME])),Object.defineProperty(global,LOGGER_NAME,{get:()=>Logger}),Logger.Log(Logger.LogLevel.INFO,this.GetSuccessString(LOGGER_NAME))}catch(e){Logger={Log:(lvl,msg)=>{console.log(msg)}},Logger.Log(Logger.LogLevel.WARN,this.GetFailString(LOGGER_NAME,mods[LOGGER_NAME]))}this._BoardID=`${process.env.BOARD} ${process.env.SERIAL} ${this._FileReader.readJSON(MAIN_CONFIG,!0).name||MSG_EMPTY}`,this._TimeZone=this._FileReader.readJSON(MAIN_CONFIG,!0).timezone||0,Logger.Log(Logger.LogLevel.INFO,`${MSG_BOARD_ID} ${this._BoardID}`),Logger.Log(Logger.LogLevel.INFO,`${MSG_LOAD_FILE} ${this._LoadFile}`);try{const ClassAppError=require(mods[ERROR_NAME]);Object.defineProperty(global,ERROR_NAME,{get:()=>ClassAppError}),Logger.Log(Logger.LogLevel.INFO,this.GetSuccessString(ERROR_NAME))}catch(e){Logger.Log(Logger.LogLevel.WARN,this.GetFailString(ERROR_NAME,mods[ERROR_NAME]))}try{const AppMath=require(mods[MATH_NAME]);Object.defineProperty(global,MATH_NAME,{get:()=>AppMath}),AppMath.is(),Logger.Log(Logger.LogLevel.INFO,this.GetSuccessString(MATH_NAME))}catch(e){Logger.Log(Logger.LogLevel.WARN,this.GetFailString(MATH_NAME,mods[MATH_NAME]))}try{const I2Cbus=new(require(mods[I2C_NAME]));Object.defineProperty(global,I2C_NAME,{get:()=>I2Cbus}),Logger.Log(Logger.LogLevel.INFO,this.GetSuccessString(I2C_NAME))}catch(e){Logger.Log(Logger.LogLevel.WARN,this.GetFailString(I2C_NAME,mods[I2C_NAME]))}try{const SPIbus=new(require(mods[SPI_NAME]));Object.defineProperty(global,SPI_NAME,{get:()=>SPIbus}),Logger.Log(Logger.LogLevel.INFO,this.GetSuccessString(SPI_NAME))}catch(e){Logger.Log(Logger.LogLevel.WARN,this.GetFailString(SPI_NAME,mods[SPI_NAME]))}try{const UARTbus=new(require(mods[UART_NAME]));Object.defineProperty(global,UART_NAME,{get:()=>UARTbus}),Logger.Log(Logger.LogLevel.INFO,this.GetSuccessString(UART_NAME))}catch(e){Logger.Log(Logger.LogLevel.WARN,this.GetFailString(UART_NAME,mods[UART_NAME]))}try{const ClassActuator=require(mods[ACTUATOR_NAME]);Object.defineProperty(global,ACTUATOR_NAME,{get:()=>ClassActuator}),Logger.Log(Logger.LogLevel.INFO,this.GetSuccessString(ACTUATOR_NAME))}catch(e){Logger.Log(Logger.LogLevel.WARN,this.GetFailString(ACTUATOR_NAME,mods[ACTUATOR_NAME]))}try{const ClassSensor=require(mods[SENSOR_NAME]);Object.defineProperty(global,SENSOR_NAME,{get:()=>ClassSensor}),Logger.Log(Logger.LogLevel.INFO,this.GetSuccessString(SENSOR_NAME))}catch(e){Logger.Log(Logger.LogLevel.WARN,this.GetFailString(SENSOR_NAME,mods[SENSOR_NAME]))}try{const SensorManager=new(require(mods[ARCHITECT_NAME]));Object.defineProperty(global,ARCHITECT_NAME,{get:()=>SensorManager}),Logger.Log(Logger.LogLevel.INFO,this.GetSuccessString(ARCHITECT_NAME))}catch(e){Logger.Log(Logger.LogLevel.WARN,this.GetFailString(ARCHITECT_NAME,mods[ARCHITECT_NAME]))}if(this._FileReader.list().includes(NETWORK_CONFIG)){Logger.Log(Logger.LogLevel.INFO,MSG_WIFI_STARTUP);let netconf=this._FileReader.readJSON(NETWORK_CONFIG,!0);try{if(process.env.MODULES.includes(WIFI))this._Wifi=new(require(mods[WIFI_NAME])),this._Wifi.Init(netconf,void 0,()=>{this._HaveWiFi=!0,Logger.Log(Logger.LogLevel.INFO,MSG_WIFI_CONNECTED+this._Wifi._Ip),this.SetSystemTime(),this.CheckSystemTime(),Logger.Log(Logger.LogLevel.INFO,MSG_BOOTUP_SUCCESS)});else{let wfbus=netconf.wifibus,bus=UARTbus._UARTbus[wfbus.index].IDbus;bus.setup(wfbus.baudrate),this._Wifi=new(require(mods[WIFI_NAME])),this._Wifi.Init(netconf,bus,()=>{this._HaveWiFi=!0,Logger.Log(Logger.LogLevel.INFO,MSG_WIFI_CONNECTED+this._Wifi._Ip),this.SetSystemTime(),this.CheckSystemTime(),Logger.Log(Logger.LogLevel.INFO,MSG_BOOTUP_SUCCESS)})}}catch(e){Logger.Log(Logger.LogLevel.ERROR,MSG_WIFI_ERROR+e),this.SetSystemTime(),this.CheckSystemTime(),Logger.Log(Logger.LogLevel.INFO,MSG_BOOTUP_SUCCESS)}}else Logger.Log(Logger.LogLevel.ERROR,this.GetFailString(WIFI_NAME,NETWORK_CONFIG)),this.SetSystemTime(),this.CheckSystemTime(),Logger.Log(Logger.LogLevel.INFO,MSG_BOOTUP_SUCCESS)}GetAppName(){try{return __FILE__}catch(e){return DEFAULT_FILE}}GetBoardName(){return this._BoardID}GetDeviceConfig(id){return((this._FileReader.readJSON(DEVICE_CONFIG,!0)||{})[this._LoadFile]||{})[id]}GetBusesConfig(){return this._FileReader.readJSON(DEVICE_CONFIG,!0)[this._LoadFile][BUS_NODE]}GetMQTTClientConfig(){return this._FileReader.readJSON(MQTT_CONFIG,!0)[this._LoadFile]}SetSystemTime(){try{this._RTC=SensorManager.CreateDevice(this.GetModuleIdByName(RTC_NODE));let ts=this._RTC[0]._ThisSensor.GetTimeUnix();if(ts<=TS_JAN_FIRST_2000||ts>=TS_JAN_FIRST_2100)Logger.Log(Logger.LogLevel.WARN,MSG_RTC_NOT_FOUND);else{let sys_t=Math.floor((new Date).getTime()/1e3);sys_t<=TS_JAN_FIRST_2000||sys_t>=TS_JAN_FIRST_2100?(setTime(ts),this._RTC[0].Start(1e3),E.setTimeZone(this._TimeZone),Logger.Log(Logger.LogLevel.INFO,MSG_RTC_SUCCESS)):(this._RTC[0]._ThisSensor.SetTime(new Date),this._RTC[0].Start(1e3),E.setTimeZone(this._TimeZone),Logger.Log(Logger.LogLevel.INFO,MSG_RTC_ADJUSTED))}}catch(e){Logger.Log(Logger.LogLevel.WARN,MSG_RTC_NOT_FOUND)}}CheckSystemTime(){let final_t_check=Math.floor((new Date).getTime()/1e3);final_t_check<=TS_JAN_FIRST_2000||final_t_check>=TS_JAN_FIRST_2100?Logger.Log(Logger.LogLevel.WARN,MSG_TIME_SET_FAIL):Logger.Log(Logger.LogLevel.INFO,`${MSG_TIME_SET_SUCCESS} ${this.GetSystemTime()}`)}GetModuleIdByName(_name){let conf=this._FileReader.readJSON(DEVICE_CONFIG,!0)[this._LoadFile],arr=Object.keys(conf),res;for(let i=0;i<arr.length;i++)if(conf[arr[i]].name==_name){res=arr[i];break}return res}GetSystemTime(){let date=new Date;return date.getFullYear()+"-"+("0"+(date.getMonth()+1)).substr(-2)+"-"+("0"+date.getDate()).substr(-2)+" "+("0"+date.getHours()).substr(-2)+":"+("0"+date.getMinutes()).substr(-2)+":"+("0"+date.getSeconds()).substr(-2)}IsProgramInConfig(filename){return Boolean(this._FileReader.readJSON(DEVICE_CONFIG,!0)[filename])}GetSuccessString(moduleName){return`${moduleName} ${MSG_MODULE_LOADED}`}GetFailString(moduleName,fileName){return`${moduleName}: ${fileName} ${MSG_MODULE_NOT_FOUND}`}}exports=ClassProcess;